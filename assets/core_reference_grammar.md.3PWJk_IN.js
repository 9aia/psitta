import{_ as a,E as t,c as n,m as s,a as e,J as l,a2 as r,o as p}from"./chunks/framework.CmNvrHOf.js";const v=JSON.parse('{"title":"Grammar API","description":"","frontmatter":{},"headers":[],"relativePath":"core/reference/grammar.md","filePath":"core/reference/grammar.md"}'),h={name:"core/reference/grammar.md"},o=s("h1",{id:"grammar-api",tabindex:"-1"},[e("Grammar API "),s("a",{class:"header-anchor",href:"#grammar-api","aria-label":'Permalink to "Grammar API {#grammar-api}"'},"​")],-1),c={id:"inflect",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#inflect","aria-label":'Permalink to "inflect <Badge type="info" text="function" /> {#inflect}"'},"​",-1),k=r(`<p>Inflects a phrase based on the provided value and locale (grammar rules).</p><ul><li><p><strong>Signature</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inflect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  phrase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Phrase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  locale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Locale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Inflection</span></span></code></pre></div></li><li><p><strong>Parameters</strong></p><ul><li><code>phrase</code>: The phrase containing potential inflection patterns.</li><li><code>value</code>: The value used for inflection (number or string).</li><li><code>locale</code>: The optional locale code to use for inflection rules (defaults to user&#39;s locale).</li></ul></li><li><p><strong>Returns</strong></p><p>An object containing the inflected phrase and the chosen form.</p></li><li><p><strong>Details</strong></p><p>This function inflects a phrase based on the provided value and the grammar rules for the specified locale. It searches for patterns within the phrase enclosed in parentheses <code>()</code>. These patterns represent possible forms the phrase can take depending on the value.</p><p>The function supports two inflection types:</p><ul><li>Number inflection: Used for phrases that change based on numerical values (e.g., &quot;There is 1 apple&quot;, &quot;There are 2 apples&quot;).</li><li>Gender inflection: Used for phrases that change based on a provided string value representing a gender (e.g., &quot;Seja bem-vindo&quot;, &quot;Seja bem-vinda&quot;).</li></ul><p>The specific inflection logic is determined by rules defined in the grammar configuration. The function first checks for locale-specific rules (<code>rules[locale]</code>) and falls back to default rules (<code>config.grammar.defaultRules</code>) if not found.</p><p>If no matching inflection pattern is found or the value doesn&#39;t match the expected type (number or string), the original phrase is returned without modification.</p></li><li><p><strong>Examples</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inflection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inflect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You have {count} (apple|apples).&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;en&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inflection.phrase); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: You have {count} apple.</span></span></code></pre></div></li></ul>`,2);function g(u,f,m,E,y,F){const i=t("Badge");return p(),n("div",null,[o,s("h2",c,[e("inflect "),l(i,{type:"info",text:"function"}),e(),d]),k])}const b=a(h,[["render",g]]);export{v as __pageData,b as default};
